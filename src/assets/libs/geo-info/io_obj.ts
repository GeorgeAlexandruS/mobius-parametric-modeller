import { GIModel } from './GIModel';
import {  TColor, TNormal, TTexture, EAttribNames, Txyz, EEntType, TId, TEntTypeIdx } from './common';

/**
 * Import obj
 */
export function importObj(obj_str: string): GIModel {
    const model: GIModel = new GIModel();
    enum EObjLine {
        OBJ_COMMENT = '#',
        OBJ_COORD = 'v ',
        OBJ_TEXTURE = 'vt ',
        OBJ_NORMAL = 'vn ',
        OBJ_FACE = 'f ',
        OBJ_LINE = 'l '
    }
    const obj_lines: string[] = obj_str.split(/\r?\n/);
    const coords: Txyz[] = [];
    const normals: TNormal[] = [];
    const textures: TTexture[] = [];
    const faces: number[][][] = [];
    const plines: number[][] = [];
    for (const obj_line of obj_lines) {
        if (obj_line.startsWith( EObjLine.OBJ_COMMENT )) {
            // Do not do anything
        } else if (obj_line.startsWith( EObjLine.OBJ_COORD )) {
            const coord: Txyz = obj_line.split(' ').slice(1, 4).map( v => parseFloat(v) ) as Txyz;
            coords.push(coord);
        } else if (obj_line.startsWith( EObjLine.OBJ_TEXTURE )) {
            const normal: TNormal = obj_line.split(' ').slice(1, 4).map( v => parseFloat(v) ) as TNormal;
            normals.push(normal);
        } else if (obj_line.startsWith( EObjLine.OBJ_NORMAL )) {
            const texture: TTexture = obj_line.split(' ').slice(1, 3).map( v => parseFloat(v) ) as TTexture;
            textures.push(texture);
        } else if (obj_line.startsWith( EObjLine.OBJ_FACE )) {
            const face_strs: string[] = obj_line.split(' ').slice(1);
            const v_indexes: number[] = [];
            const t_indexes: number[] = [];
            const n_indexes: number[] = [];
            face_strs.forEach( face_str => {
                const face_sub_indexes: number[] = face_str.split('/').map( str => parseInt(str, 10) - 1 );
                v_indexes.push(face_sub_indexes[0]);
                t_indexes.push(face_sub_indexes[1]);
                n_indexes.push(face_sub_indexes[2]);
            });
            faces.push([v_indexes, t_indexes, n_indexes]);
        } else if (obj_line.startsWith( EObjLine.OBJ_LINE )) {
            const pline: number[] = obj_line.split(' ').slice(1).map( v => parseInt(v, 10) - 1 ) as TTexture;
            plines.push(pline);
        } else {
            console.log('Found unrecognised line of data in OBJ file');
        }
    }
    for (const coord of coords) {
        const posi_i: number = model.geom.add.addPosi();
        model.attribs.add.setAttribVal(EEntType.POSI, posi_i, EAttribNames.COORDS, coord);
    }
    for (const face of faces) {
        console.log(face[0]);
        const face_i: number = model.geom.add.addPgon(face[0]);
        // TODO: texture uv
        // TODO: normals
    }
    return model;
}

/**
 * Export to obj
 */
export function exportVertBasedObj(model: GIModel, entities: TEntTypeIdx[]): string {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let vt_str = '';
    let vn_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR);
    const has_normal_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL);
    const has_texture_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(model, entities);
    const [verts_i, posis_i]: [number[], number[]] = _getVertsPosis(model, pgons_i, plines_i);
    // vertices, v
    const vert_i_to_obj_v: number[] = [];
    let num_v = 0;
    for (let i = 0; i < verts_i.length; i++) {
        const vert_i: number =  verts_i[i];
        const coord: Txyz = model.attribs.query.getVertCoords(vert_i);
        if (has_color_attrib) {
            const color: TColor = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.COLOR, vert_i) as TColor;
            v_str += 'v ' + coord.map( v => v.toString() ).join(' ')  + ' ' + color.map( c => c.toString() ).join(' ') + '\n';
        } else {
            v_str += 'v ' + coord.map( v => v.toString() ).join(' ') + '\n';
        }
        vert_i_to_obj_v[vert_i] = i;
        num_v += 1;
    }
    // textures, vt
    let num_vt = 0;
    const vert_i_obj_vt: number[] = [];
    if (has_texture_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i  = verts_i[i];
            const texture: TTexture = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.TEXTURE, vert_i) as TTexture;
            if (texture !== undefined) {
                vt_str += 'vt ' + texture.map( v => v.toString() ).join(' ') + '\n';
                vert_i_obj_vt[vert_i] = i;
                num_vt += 1;
            }
        }
    }
    // normals, vn
    let num_vn = 0;
    const vert_i_obj_vn: number[] = [];
    if (has_normal_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i  = verts_i[i];
            const  normal: TNormal = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.NORMAL, vert_i) as TNormal;
            if (normal !== undefined) {
                vn_str += 'vn ' + normal.map( v => v.toString() ).join(' ') + '\n';
                vert_i_obj_vn[vert_i] = i;
                num_vn += 1;
            }
        }
    }
    // polygons, f
    for (const pgon_i of pgons_i) {
        const pgon_verts_i_outer: number[] = model.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);
        // const verts_i_outer = verts_i[0];
        // TODO what about holes
        f_str += 'f ';
        for (const vert_i of pgon_verts_i_outer) {
            // v
            f_str += (1 + vert_i_to_obj_v[vert_i]);
            if (has_texture_attrib || has_normal_attrib) {
                // vt
                if (has_texture_attrib) {
                    // TODO ignore them for now
                    f_str += '/';
                } else {
                    f_str += '/';
                }
                // vn
                if (has_normal_attrib) {
                    f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                } else {
                    f_str += '/';
                }
            }
            f_str += ' ';
        }
        f_str += '\n';
    }
    // polylines, l
    for (const pline_i of plines_i) {
        const pline_verts_i: number[] = model.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);
        l_str += 'l ' + pline_verts_i.map( vert_i => (vert_i_to_obj_v[vert_i] + 1).toString() ).join(' ') + '\n';
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}

/**
 * Export to obj
 */
export function exportPosiBasedObj(model: GIModel, entities: TEntTypeIdx[]): string {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let vt_str = '';
    let vn_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR);
    const has_normal_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL);
    const has_texture_attrib: boolean = model.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(model, entities);
    const [verts_i, posis_i]: [number[], number[]] = _getVertsPosis(model, pgons_i, plines_i);
    // positions
    let num_v = 0;
    const posi_i_to_obj_v: number[] = [];
    for (let i = 0; i < posis_i.length; i++) {
        const posi_i: number =  posis_i[i];
        const coord: Txyz = model.attribs.query.getPosiCoords(posi_i);
        if (has_color_attrib) {
            // get the average color from the verts
            const posi_verts_i: number[] = model.geom.nav.navPosiToVert(posi_i);
            let color: TColor = [0, 0, 0];
            for (const posi_vert_i of posi_verts_i) {
                const c: TColor = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.COLOR, posi_vert_i) as TColor;
                color = [color[0] + c[0], color[1] + c[1], color[2] + c[2]];
            }
            const div: number = posi_verts_i.length;
            color = [color[0] / div, color[1] / div, color[2] / div];
            v_str += 'v ' + coord.map( v => v.toString() ).join(' ')  + ' ' + color.map( c => c.toString() ).join(' ') + '\n';
        } else {
            v_str += 'v ' + coord.map( v => v.toString() ).join(' ') + '\n';
        }
        posi_i_to_obj_v[posi_i] = i;
        num_v += 1;
    }
    // textures, vt
    let num_vt = 0;
    const vert_i_obj_vt: number[] = [];
    if (has_texture_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i  = verts_i[i];
            const texture: TTexture = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.TEXTURE, vert_i) as TTexture;
            if (texture !== undefined) {
                vt_str += 'vt ' + texture.map( v => v.toString() ).join(' ') + '\n';
                vert_i_obj_vt[vert_i] = i;
                num_vt += 1;
            }
        }
    }
    // normals, vn
    let num_vn = 0;
    const vert_i_obj_vn: number[] = [];
    if (has_normal_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i  = verts_i[i];
            const  normal: TNormal = model.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.NORMAL, vert_i) as TNormal;
            if (normal !== undefined) {
                vn_str += 'vn ' + normal.map( v => v.toString() ).join(' ') + '\n';
                vert_i_obj_vn[vert_i] = i;
                num_vn += 1;
            }
        }
    }
    // polygons, f
    for (const pgon_i of pgons_i) {
        const pgon_verts_i_outer: number[] = model.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);
        // const verts_i_outer = verts_i[0];
        // TODO what about holes
        f_str += 'f ';
        for (const vert_i of pgon_verts_i_outer) {
            // v
            f_str += (1 + posi_i_to_obj_v[model.geom.nav.navVertToPosi(vert_i)]);
            if (has_texture_attrib || has_normal_attrib) {
                // vt
                if (has_texture_attrib) {
                    // TODO ignore them for now
                    f_str += '/';
                } else {
                    f_str += '/';
                }
                // vn
                if (has_normal_attrib) {
                    f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                } else {
                    f_str += '/';
                }
            }
            f_str += ' ';
        }
        f_str += '\n';
    }
    // polylines, l
    for (const pline_i of plines_i) {
        const pline_verts_i: number[] = model.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);
        l_str += 'l ' + pline_verts_i.map( vert_i =>
            (posi_i_to_obj_v[model.geom.nav.navVertToPosi(vert_i)] + 1).toString() ).join(' ') + '\n';
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}

/**
 * Get all the polygons and polyline entities.
 */
function _getPgonsPlines(model: GIModel, entities: TEntTypeIdx[]): [number[], number[]] {
    let pgons_i: number[] = [];
    let plines_i: number[] = [];
    if (entities === null) {
        pgons_i = model.geom.query.getEnts(EEntType.PGON, false);
        plines_i = model.geom.query.getEnts(EEntType.PLINE, false);
    } else {
        for (const [ent_type, ent_i] of entities) {
            if (ent_type === EEntType.PGON) {
                pgons_i.push(ent_i);
            } else if (ent_type === EEntType.PLINE) {
                plines_i.push(ent_i);
            } else if (ent_type === EEntType.COLL) {
                for (const pgon_i of model.geom.nav.navAnyToPgon(EEntType.COLL, ent_i)) {
                    pgons_i.push(pgon_i);
                }
                for (const pline_i of model.geom.nav.navAnyToPline(EEntType.COLL, ent_i)) {
                    plines_i.push(pline_i);
                }
            }
        }
    }
    return [pgons_i, plines_i];
}

/**
 * Get all the posis from the polygon and polyline entities.
 */
function _getVertsPosis(model: GIModel, pgons_i: number[], plines_i: number[]): [number[], number[]] {
    const posis_i: Set<number> = new Set();
    const verts_i: Set<number> = new Set();
    for (const pgon_i of pgons_i) {
        for (const vert_i of model.geom.nav.navAnyToVert(EEntType.PGON, pgon_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.geom.nav.navAnyToPosi(EEntType.PGON, pgon_i)) {
            posis_i.add(posi_i);
        }
    }
    for (const pline_i of plines_i) {
        for (const vert_i of model.geom.nav.navAnyToVert(EEntType.PLINE, pline_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.geom.nav.navAnyToPosi(EEntType.PLINE, pline_i)) {
            posis_i.add(posi_i);
        }
    }
    return [Array.from(verts_i), Array.from(posis_i)];
}
